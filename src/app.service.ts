import { Injectable } from '@nestjs/common';
import { Hears, Help, On, Start, Update } from 'nestjs-telegraf';
import { Context } from 'telegraf';
import { OpenaiService } from './openai/openai.service';

const PROMPT =
  '–Ø —Ç–µ–±–µ —Å–µ–π—á–∞—Å –Ω–∞–ø–∏—à—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–µ—Ä–µ—á–∏—Å–ª—é, —á—Ç–æ —è —Å—ä–µ–ª. –ï—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–∞:\n' +
  '1) –¢–µ–±–µ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –º–Ω–µ —Å–ø–∏—Å–æ–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –±–µ–∑ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ "–ü—Ä–æ–¥—É–∫—Ç 1, –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–∞–ª–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å; –ü—Ä–æ–¥—É–∫—Ç 2, –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–∞–ª–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å" \n' +
  '2) –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –≤ –≤–µ—Å \n' +
  '3) –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –µ–≥–æ –≤–µ—Å–∞ –ø–æ—Å—á–∏—Ç–∞–π –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–ª–æ—Ä–∏–π, —É—á–∏—Ç—ã–≤–∞–π —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç—ã —É–∂–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω—ã';

@Update()
@Injectable()
export class AppService {
  constructor(private readonly openAiService: OpenaiService) {}
  getData(): { message: string } {
    return { message: 'Welcome to server!' };
  }

  @Start()
  async startCommand(ctx: Context) {
    await ctx.reply('Welcome');
  }

  @Help()
  async helpCommand(ctx: Context) {
    await ctx.reply('Send me a sticker');
  }

  @On('sticker')
  async onSticker(ctx: Context) {
    await ctx.reply('üëç');
  }

  @On('voice')
  async onVoice(ctx: Context) {
    const fileId = (ctx.message as any).voice;
    const { href } = await ctx.telegram.getFileLink(fileId);
    const text = await this.openAiService.transcript(href);
    await ctx.reply(`–ó–∞–ø—Ä–æ—Å ${text}`);

    const output = await this.openAiService.prompt(`${PROMPT} + \n + ${text} `);

    const {
      choices: [
        {
          message: { content },
        },
      ],
    } = output;
    await ctx.reply(content);
  }

  @Hears('audio')
  async hearsHi(ctx: Context) {
    const response = await this.openAiService.transcript(null);
    await ctx.reply(response);
  }
}
